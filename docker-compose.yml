version: "3"

services:
  api:
    container_name: api-golang
    restart: on-failure:10
    build:
      context: SendMail
      dockerfile: cmd/api/Dockerfile
    volumes:
      - ./assets:/api/assets
    ports:
      - 8080:8080
    environment:
      - USER_SERVICE=user-service
      - USER_SERVICE_PORT=50001
      - WISHLIST_SERVICE=wishlist-service
      - WISHLIST_SERVICE_PORT=50003
      - MAIL_SERVICE=mail-service
      - MAIL_SERVICE_PORT=50002
      - REDIS_DNS=redis
      - REDIS_DNS_PORT=6379
      - KAFKA_ADDRESS=kafka
      - KAFKA_PORT=9092
      - WAIT_HOSTS_TIMEOUT=300
      - WAIT_HOSTS= redis:6379, user-service:50001, wishlist-service:50003, mail-service:50002, kafka:9092
    networks:
      - backend

  mail-service:
    container_name: mail-service
    build:
      context: SendMail
      dockerfile: cmd/mail/Dockerfile
    ports:
      - 50002:50002
    environment:
      - DB_DRIVER=postgres
      - DB_WISHLIST_HOST=postgres-wishlist
      - DB_WISHLIST_PORT=5432
      - DB_WISHLIST=root
      - DB_WISHLIST_PASSWORD=secret
      - DB_WISHLIST_NAME=golang
      - WAIT_HOSTS_TIMEOUT=120
      - WAIT_HOSTS=postgres-wishlist:5432
    networks:
      - backend

  postgres-db-mail:
    container_name: postgres-mail
    build: db/mail/postgres
    volumes:
      - /var/lib/postgresql/data
    ports:
      - 5433:5432
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=secret
      - PGDATA=/pgdata
      - POSTGRES_DB=golang
    networks:
      - backend

  kafka:
    image: wurstmeister/kafka:2.12-2.3.1
    restart: on-failure:3
    links:
      - zookeeper
    ports:
      - 9092:9092
      - 9093:9093
    expose:
      - "9092"
      - "9093"
    environment:
      KAFKA_VERSION: '2.3.1'
      KAFKA_BROKER_ID: '1'
      KAFKA_CREATE_TOPICS: 'send_mail:3:1'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_ADVERTISED_HOST_NAME: 'localhost'
      KAFKA_ADVERTISED_PORT: '9092'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_CONNECT_BOOTSTRAP_SERVERS: 'localhost:9092'
      KAFKA_CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: 0
      KAFKA_CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_MESSAGE_MAX_BYTES: '200000000'
      KAFKA_LISTENERS: 'PLAINTEXT://:9092,SASL_PLAINTEXT://:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9092,SASL_PLAINTEXT://localhost:9093'
      KAFKA_SASL_ENABLED_MECHANISMS: 'PLAIN,SCRAM-SHA-256,SCRAM-SHA-512'
      KAFKA_OPTS: "-Djava.security.auth.login.config=/opt/kafka/config/kafka_server_jaas.conf"
      CUSTOM_INIT_SCRIPT: |-
        echo -e 'KafkaServer {\norg.apache.kafka.common.security.scram.ScramLoginModule required\n username="adminscram"\n password="admin-secret";\n org.apache.kafka.common.security.plain.PlainLoginModule required\n username="adminplain"\n password="admin-secret"\n user_adminplain="admin-secret";\n  };' > /opt/kafka/config/kafka_server_jaas.conf;
        /opt/kafka/bin/kafka-configs.sh --zookeeper zookeeper:2181 --alter --add-config 'SCRAM-SHA-256=[password=admin-secret-256],SCRAM-SHA-512=[password=admin-secret-512]' --entity-type users --entity-name adminscram
    container_name: kafka
    networks:
      - backend

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - 2181:2181
    expose:
      - "2181"
    container_name: zookeeper
    networks:
      - backend

  mail-consumer:
    container_name: mail-consumer
    build:
      context: SendMail
      dockerfile: cmd/mail-consumer/Dockerfile
    environment:
      - USER_SERVICE=user-service
      - USER_SERVICE_PORT=50001
      - KAFKA_ADDRESS=kafka
      - KAFKA_PORT=9092
      - WAIT_HOSTS_TIMEOUT=120
      - WAIT_HOSTS=user-service:50001, kafka:9092
    networks:
      - backend

networks:
  backend:
    driver: bridge
